AWSTemplateFormatVersion: '2010-09-09'
Description: 'Launch an EC2 Instance that acts as an IoT Greengrass device.'

Parameters:
  AppName:
    Description: Enter a name for the application
    Type: String
    Default: 'demo-greengrass'
    AllowedPattern: '^[a-z]+(-[a-z]+)*$'
    ConstraintDescription: Must be lowercase a-z or hypen, 30 characters max
    MaxLength: 30
  
  MyIp:
    Description: Enter your IP address with /32 to allow SSH access to the instance
    Type: String
    Default: '0.0.0.0/32'
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}/32$'
    ConstraintDescription: Must be a valid IP address in the format x.x.x.x/32

Resources:
  ####################################################################################
  # Create an S3 bucket for Greengrass component artifacts and data sent from devices.
  ####################################################################################
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      # If using Greengrass Development Kit (GDK) CLI, bucket name format must be: {Bucket-Prefix}-{Region}-{AccountId}
      BucketName: !Sub ${AppName}-${AWS::Region}-${AWS::AccountId}
      AccessControl: Private

  ####################################################################################
  # Create an IAM Policy that allows deployed components to download code from S3.
  ####################################################################################
  S3AccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub ${AppName}-s3access-policy
      Roles:
        - 'GreengrassV2TokenExchangeRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
            Resource: !Sub ${S3Bucket.Arn}/*

  ####################################################################################
  # Create an IAM Policy that allows Greengrass devices to provision themselves.
  ####################################################################################
  ProvisionPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub ${AppName}-provision-policy
      Roles:
        - !Ref InstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'iot:AddThingToThingGroup'
              - 'iot:AttachPolicy'
              - 'iot:AttachThingPrincipal'
              - 'iot:CreateKeysAndCertificate'
              - 'iot:CreatePolicy'
              - 'iot:CreateRoleAlias'
              - 'iot:CreateThing'
              - 'iot:CreateThingGroup'
              - 'iot:DescribeEndpoint'
              - 'iot:DescribeRoleAlias'
              - 'iot:DescribeThingGroup'
              - 'iot:GetPolicy'
              - 'iot:CancelJob'
              - 'iot:CreateJob'
              - 'iot:DeleteThingShadow'
              - 'iot:DescribeJob'
              - 'iot:DescribeThing'
              - 'iot:DescribeThingGroup'
              - 'iot:GetThingShadow'
              - 'iot:UpdateJob'
              - 'iot:UpdateThingShadow'
              - 'iam:GetRole'
              - 'iam:CreateRole'
              - 'iam:PassRole'
              - 'iam:CreatePolicy'
              - 'iam:AttachRolePolicy'
              - 'iam:GetPolicy'
              - 'sts:GetCallerIdentity'
              - 'greengrass:CreateDeployment'
            Resource: '*'

  ####################################################################################
  # Create a Thing Group.
  # When Greengrass is installed, it associates the device with this Thing Group.
  ####################################################################################
  ThingGroup:
    Type: 'AWS::IoT::ThingGroup'
    Properties: 
      ThingGroupName: !Sub ${AppName}-thing-group

  ####################################################################################
  # Create an EC2 Instance to act as a fake IoT device/thing and install Greengrass.
  ####################################################################################
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles: 
        - !Ref InstanceRole

  # The private key is saved to AWS Systems Manager Parameter Store under the parameter name /ec2/keypair/{key_pair_id}. 
  EC2KeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub ${AppName}-keypair
      KeyFormat: ppk
      KeyType: rsa

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for SSH access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Sub '${MyIp}'

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't4g.nano'
      ImageId: '{{resolve:ssm:/aws/service/debian/release/12/latest/arm64}}'
      KeyName: !Ref EC2KeyPair
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash
            # Update and upgrade installed packages:
            sudo apt update && apt upgrade -y
            
            # Install unzip and JDK:
            sudo apt install unzip default-jdk-headless -y

            # # Download and install NodeJs 20 runtime:
            # curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            # sudo apt install nodejs -y
            # # Create a symlink named nodejs20.x pointing to the node executable
            # sudo ln -s /usr/bin/node /usr/bin/nodejs20.x
            
            # Download and install Greengrass software:
            curl -s https://d2s8p88vqu9w66.cloudfront.net/releases/greengrass-nucleus-latest.zip > greengrass-nucleus-latest.zip && unzip greengrass-nucleus-latest.zip -d GreengrassInstaller
            sudo -E java -Droot="/greengrass/v2" -Dlog.store=FILE -jar ./GreengrassInstaller/lib/Greengrass.jar --aws-region ${AWS::Region} --thing-name ${AppName}-thing --thing-group-name ${ThingGroup} --component-default-user ggc_user:ggc_group --provision true --setup-system-service true --deploy-dev-tools true
            
            # # Modify GRUB configuration to support cgroups v1 for Greengrass containerized Lambda functions:
            # echo 'GRUB_CMDLINE_LINUX="cgroup_enable=memory cgroup_memory=1 systemd.unified_cgroup_hierarchy=0"' >> /etc/default/grub
            # sudo update-grub
            
            # Reboot the instance:
            sudo reboot

  ####################################################################################
  # Create a Greengrass deployment to install and configure default components.
  ####################################################################################
  GreengrassDeployment:
    Type: 'AWS::GreengrassV2::Deployment'
    Properties:
      DeploymentName: 'Configure Nucleus and LogManager'
      TargetArn: !GetAtt ThingGroup.Arn
      DeploymentPolicies:
        FailureHandlingPolicy: ROLLBACK
      Components:
        aws.greengrass.Nucleus:
          ComponentVersion: '2.12.1'
          ConfigurationUpdate:
            # Configure Greengrass Nucleus.
            # jvmOptions: support low memory devices
            # interpolateComponentConfiguration: support component configurations that use recipe variables like {iot:thingName}
            Merge: '{"jvmOptions":"-Xmx64m -XX:+UseSerialGC -XX:TieredStopAtLevel=1","interpolateComponentConfiguration":"true"}'
        aws.greengrass.LogManager:
          ComponentVersion: '2.3.7' 
          ConfigurationUpdate:
            # Configure Greengrass LogManager to upload all logs to CloudWatch every 60 seconds.
            # DEBUG, INFO, WARN, ERROR
            Merge: '{"logsUploaderConfiguration":{"systemLogsConfiguration":{"uploadToCloudWatch":"true","minimumLogLevel":"DEBUG"},"componentLogsConfigurationMap":{"com.example.LocalPubSub":{"minimumLogLevel":"DEBUG"}}},"periodicUploadIntervalSec":"60"}'

Outputs:
  ThingGroupARN:
    Description: "ARN of the IoT Thing Group"
    Value: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thinggroup/${ThingGroup}"